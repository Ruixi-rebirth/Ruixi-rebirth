#!/usr/bin/env python3

import json
import os
import re
from datetime import datetime
from urllib.request import Request, urlopen


def create_query():
    query = """
    {
      issues: search(type: ISSUE, query: "author:Ruixi-rebirth is:issue") {
        issueCount
      }
      prs: search(type: ISSUE, query: "author:Ruixi-rebirth is:pr") {
        issueCount
      }
      user(login: "Ruixi-rebirth") {
        followers { totalCount }
        following { totalCount }
        gists { totalCount }
        issues { totalCount }
        pullRequests { totalCount }
        repositories(first: 100, isFork: false, privacy: PUBLIC) {
          totalCount
          nodes {
            forkCount
            languages(first: 100) {
              edges {
                node { name }
                size
              }
            }
            stargazerCount
            viewerPermission
          }
        }
        repositoriesContributedTo(privacy: PUBLIC) {
          totalCount
        }
      }
    }"""
    return query


def fetch_commits_count():
    request = Request(
        "https://api.github.com/search/commits?q=author:Ruixi-rebirth&per_page=1",
        headers={"Accept": "application/vnd.github.cloak-preview"},
    )
    response = json.load(urlopen(request))
    return response["total_count"]


def fetch_github_data(query):
    request = Request(
        "https://api.github.com/graphql",
        json.dumps({"query": query}).encode("ascii"),
        {"Authorization": f"token {os.environ['TOKEN']}"},
    )
    response = json.load(urlopen(request))
    print(response)
    return response["data"]


def compile_readme(data, commits_count):
    user = data["user"]
    forks = sum(
        repo["forkCount"]
        for repo in user["repositories"]["nodes"]
        if repo["viewerPermission"] == "ADMIN"
    )
    stars = sum(
        repo["stargazerCount"]
        for repo in user["repositories"]["nodes"]
        if repo["viewerPermission"] == "ADMIN"
    )

    langs = {}
    for repo in user["repositories"]["nodes"]:
        for lang in repo["languages"]["edges"]:
            name = lang["node"]["name"]
            size = lang["size"]
            langs[name] = langs.get(name, 0) + size

    total_size = sum(langs.values())

    # 使用 Markdown 格式化统计和语言使用信息
    readme = """
<table>
  <tr align="center">
    <td><b>Statistics</b></td>
    <td><b>Languages</b></td>
  </tr>
  <tr valign="top">
    <td>
      <table>
        <tr><td>Repositories</td><td>{repo_count}</td></tr>
        <tr><td>Gists</td><td>{gists_count}</td></tr>
        <tr><td>Stargazers</td><td>{stars}</td></tr>
        <tr><td>Forks</td><td>{forks}</td></tr>
        <tr><td>Contributed to</td><td>{contrib_count}</td></tr>
        <tr><td>Commits</td><td>{commits}</td></tr>
        <tr><td>Issues</td><td>{issues_count}</td></tr>
        <tr><td>Pull requests</td><td>{prs_count}</td></tr>
        <tr><td>Followers</td><td>{followers_count}</td></tr>
        <tr><td>Following</td><td>{following_count}</td></tr>
      </table>
    </td>
    <td>
      <table>
        {langs_rows}
      </table>
    </td>
  </tr>
</table>

<sub>Last updated: {last_updated}</sub>
""".format(
        repo_count=user["repositories"]["totalCount"],
        gists_count=user["gists"]["totalCount"],
        contrib_count=user["repositoriesContributedTo"]["totalCount"],
        commits=commits_count,
        issues_count=data["issues"]["issueCount"],
        prs_count=data["prs"]["issueCount"],
        followers_count=user["followers"]["totalCount"],
        following_count=user["following"]["totalCount"],
        stars=stars,
        forks=forks,
        langs_rows="\n".join(
            f"<tr><td>{lang}</td><td>{round(size / total_size * 100, 2)}%</td></tr>"
            for lang, size in sorted(langs.items(), key=lambda x: x[1], reverse=True)[
                :10
            ]
        ),
        last_updated=datetime.utcnow().strftime("%F %T") + " UTC",
    )
    return readme


def main():
    query = create_query()
    commits_count = fetch_commits_count()
    data = fetch_github_data(query)
    readme = compile_readme(data, commits_count)
    with open("README.md", "w") as file:
        file.write(readme)


if __name__ == "__main__":
    main()
